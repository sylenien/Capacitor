{"version":3,"sources":["const/theme.ts","components/ThemeSwitcher/index.tsx","Stores/StatsStore.ts","MainPage/FileUpload/index.tsx","MainPage/FileUpload/utils.ts","MainPage/index.tsx","App.tsx","index.tsx"],"names":["theme","light","background","backgroundAccent","accent","text","dark","colors","isDarkTheme","ThemeContext","React","createContext","onThemeChange","arg","ThemeSwitcherContainer","styled","div","ThemeSwitcher","onChange","Switch","checked","hasCheckIcon","MoonIcon","color","undefined","size","marginLeft","StatsStore","observable","action","amount","statsAmount","stats","i","length","scenario","lowercaseName","name","toLowerCase","existingData","scenarioHighscoreStats","score","statsReady","console","log","Greeting","Tip","FileUpload","observer","useContext","useState","filesProcessed","setProcessedValue","FilePicker","multiple","width","placeholder","files","scenarioCount","promises","loader","Array","from","forEach","file","index","filePromise","Promise","resolve","reader","FileReader","readAsText","onload","result","resultData","scenarioStats","match","date","push","createFilePromiseCollection","all","then","setStats","className","MainPageContainer","MainPage","Container","Header","Content","App","storedTheme","window","localStorage","getItem","matchMedia","matches","setItem","JSON","parse","setDarkTheme","useEffect","listenerFunction","e","addEventListener","removeEventListener","themeContext","Provider","value","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.230260b3.chunk.js","sourcesContent":["import React from 'react'\n\nconst theme = {\n  light: {\n    background: '#f4eeff',\n    backgroundAccent: '#dcd6f7',\n    accent: '#a6b1e1',\n    text: '#424874',\n  },\n  dark: {\n    background: '#424874',\n    text: '#f4eeff',\n    backgroundAccent: '#a6b1e1',\n    accent: '#dcd6f7',\n  },\n}\n\nexport const colors = (isDarkTheme?: boolean) =>\n  isDarkTheme ? theme.dark : theme.light\n\nexport const ThemeContext = React.createContext({\n  isDarkTheme: false,\n  onThemeChange: (arg: any) => {},\n})\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Switch, MoonIcon } from 'evergreen-ui'\nimport { colors } from 'const/theme'\nimport { ComponentWithTheme } from 'const/types'\n\nconst ThemeSwitcherContainer = styled.div<ComponentWithTheme>`\n  color: white !important;\n  display: flex;\n  align-items: center;\n\n  & > svg {\n    fill: ${({ isDarkTheme }) => colors(isDarkTheme).text}!important;\n  }\n`\n\ninterface IThemeSwitcher {\n  isDarkTheme: boolean\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst ThemeSwitcher: React.FC<IThemeSwitcher> = ({ isDarkTheme, onChange }) => (\n  <ThemeSwitcherContainer isDarkTheme={isDarkTheme}>\n    <Switch checked={isDarkTheme} hasCheckIcon={false} onChange={onChange} />\n    <MoonIcon\n      color={!isDarkTheme ? undefined : 'selected'}\n      size={20}\n      marginLeft={6}\n    />\n  </ThemeSwitcherContainer>\n)\n\nexport default ThemeSwitcher\n","import { observable, action } from 'mobx'\nimport { ScenarioStats, ScenarioStatHash } from 'const/types'\n\nclass Stats {\n  @observable stats: ScenarioStats[] = []\n  @observable scenarioHighscoreStats: ScenarioStatHash = {}\n  @observable statsAmount = 0\n  @observable statsReady = false\n\n  @action\n  public setStatsAmount = (amount: number) => {\n    this.statsAmount = amount\n  }\n\n  @action\n  public setStats = (stats: ScenarioStats[]) => {\n    this.stats = stats\n\n    let i = 0\n    while (i < stats.length) {\n      const scenario = stats[i]\n      const lowercaseName = scenario.name.toLowerCase()\n      const existingData = this.scenarioHighscoreStats[lowercaseName]\n      if (existingData) {\n        const isNewScoreHigher = scenario.score > existingData.score\n        if (isNewScoreHigher) {\n          this.scenarioHighscoreStats[lowercaseName] = scenario\n        }\n      } else {\n        this.scenarioHighscoreStats[lowercaseName] = scenario\n      }\n      i++\n    }\n\n    this.statsReady = true\n\n    console.log(this.stats, this.scenarioHighscoreStats)\n  }\n}\n\nconst StatsStore = new Stats()\nexport default StatsStore\n","import React, { useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport { FilePicker } from 'evergreen-ui'\nimport { observer } from 'mobx-react-lite'\n\nimport { colors, ThemeContext } from 'const/theme'\nimport { ComponentWithTheme } from 'const/types'\nimport StatsStore from 'Stores/StatsStore'\nimport { createFilePromiseCollection } from './utils'\n\nconst Greeting = styled.div`\n  font-size: 16px;\n  margin-bottom: 6px;\n`\nconst Tip = styled.div<ComponentWithTheme>`\n  font-size: 12px;\n  margin-top: 3px;\n  color: ${({ isDarkTheme }) => colors(isDarkTheme).accent};\n`\n\nconst hint =\n  '<Your steam folder>\\\\steamapps\\\\common\\\\FPSAimTrainer\\\\FPSAimTrainer\\\\stats'\n\nconst FileUpload: React.FC = observer(() => {\n  const { isDarkTheme } = useContext(ThemeContext)\n  const [filesProcessed, setProcessedValue] = useState(0)\n\n  const readCsv = (files: FileList) => {\n    console.log(files)\n\n    const scenarioCount = files.length\n    StatsStore.statsAmount = scenarioCount\n    setProcessedValue(0)\n\n    const promises = createFilePromiseCollection(files, setProcessedValue)\n\n    Promise.all(promises).then((scenarioStats) => {\n      StatsStore.setStats(scenarioStats)\n    })\n  }\n\n  const { statsAmount } = StatsStore\n\n  return (\n    <>\n      <Greeting>Upload your statistics to begin</Greeting>\n      <FilePicker\n        multiple\n        width={250}\n        placeholder=\"0 files selected\"\n        onChange={readCsv}\n        className=\"customInput\"\n      />\n      <Tip isDarkTheme={isDarkTheme}>\n        {statsAmount === 0 ? hint : `${filesProcessed}/${statsAmount}`}\n      </Tip>\n    </>\n  )\n})\n\nexport default FileUpload\n","import { ScenarioStats } from 'const/types'\n\nexport const createFilePromiseCollection = (files: FileList, loader: Function) => {\n  const promises: Promise<ScenarioStats>[] = []\n\n  Array.from(files).forEach((file, index) => {\n    const filePromise = new Promise<ScenarioStats>((resolve) => {\n      const reader = new FileReader()\n      reader.readAsText((file as unknown) as Blob)\n      reader.onload = () => {\n        if (reader.result !== null) {\n          const resultData = reader.result as string\n          const scenarioStats = {\n            name: file.name.match(/(.*).-.Challenge/i)![1],\n            score: resultData.match(/Score:,(\\d*)/i)![1],\n            date: file.name.match(/Challenge.-.(.*).Stats/i)![1],\n          }\n          resolve(scenarioStats)\n          loader(index + 1)\n        }\n        resolve({ name: 'null', score: 'null', date: 'null' })\n      }\n    })\n\n    promises.push(filePromise)\n  })\n\n  return promises\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { observer } from 'mobx-react-lite'\n\nimport { colors, ThemeContext } from 'const/theme'\nimport { ComponentWithTheme } from 'const/types'\nimport StatsStore from 'Stores/StatsStore'\nimport FileUpload from 'MainPage/FileUpload'\n\nconst MainPageContainer = styled.div<ComponentWithTheme>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  & > .customInput > button {\n    background-color: ${({ isDarkTheme }) => colors(isDarkTheme).backgroundAccent};\n    background-image: none;\n    color: ${({ isDarkTheme }) => colors(isDarkTheme).text}!important;\n  }\n`\n\nconst MainPage: React.FC = observer(() => {\n  const { isDarkTheme } = useContext(ThemeContext)\n\n  return (\n    <MainPageContainer isDarkTheme={isDarkTheme}>\n      {StatsStore.statsReady ? <>Ready</> : <FileUpload />}\n    </MainPageContainer>\n  )\n})\n\nexport default MainPage\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport ThemeSwitcher from 'components/ThemeSwitcher'\nimport { colors, ThemeContext } from 'const/theme'\nimport { ComponentWithTheme } from 'const/types'\nimport MainPage from 'MainPage'\n\nconst Container = styled.div<ComponentWithTheme>`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${({ isDarkTheme }) => colors(isDarkTheme).background};\n  color: ${({ isDarkTheme }) => colors(isDarkTheme).text};\n  display: flex;\n  flex-direction: column;\n`\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  height: 44px;\n  padding: 12px;\n  box-sizing: border-box;\n`\nconst Content = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n`\n\nconst checkIfDeviceDarkTheme = () => {\n  if (\n    window.matchMedia &&\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n  ) {\n    window.localStorage.setItem('theme', 'true')\n    return 'true'\n  }\n  window.localStorage.setItem('theme', 'false')\n  return 'false'\n}\n\nconst App: React.FC = () => {\n  const storedTheme =\n    window.localStorage.getItem('theme') ?? checkIfDeviceDarkTheme()\n  const [isDarkTheme, setDarkTheme] = useState(JSON.parse(storedTheme))\n\n  const onThemeChange = (isDarkTheme: boolean) => {\n    setDarkTheme(isDarkTheme)\n    return window.localStorage.setItem('theme', isDarkTheme ? 'true' : 'false')\n  }\n\n  useEffect(() => {\n    const listenerFunction = (e: MediaQueryListEvent) => onThemeChange(e.matches)\n    window\n      .matchMedia('(prefers-color-scheme: dark)')\n      .addEventListener('change', listenerFunction)\n\n    return () =>\n      window\n        .matchMedia('(prefers-color-scheme: dark)')\n        .removeEventListener('change', listenerFunction)\n  }, [])\n\n  const themeContext = { isDarkTheme, onThemeChange }\n  return (\n    <ThemeContext.Provider value={themeContext}>\n      <Container isDarkTheme={isDarkTheme}>\n        <Header>\n          <ThemeSwitcher\n            isDarkTheme={isDarkTheme}\n            onChange={(e) => onThemeChange(e.target.checked)}\n          />\n        </Header>\n        <Content>\n          <MainPage />\n        </Content>\n      </Container>\n    </ThemeContext.Provider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n//reportWebVitals(console.log);\n"],"sourceRoot":""}