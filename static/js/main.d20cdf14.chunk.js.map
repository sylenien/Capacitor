{"version":3,"sources":["const/theme.ts","components/ThemeSwitcher/index.tsx","Stores/StatsStore.ts","MainPage/index.tsx","App.tsx","index.tsx"],"names":["theme","light","background","backgroundAccent","accent","text","dark","colors","isDarkTheme","ThemeContext","React","createContext","onThemeChange","arg","ThemeSwitcherContainer","styled","div","ThemeSwitcher","onChange","Switch","checked","hasCheckIcon","MoonIcon","color","undefined","size","marginLeft","StatsStore","observable","MainPageContainer","Greeting","Tip","MainPage","observer","useContext","useState","filesProcessed","setProcessedValue","statsAmount","FilePicker","multiple","width","placeholder","files","console","log","scenarioCount","length","promises","Array","from","forEach","file","index","filePromise","Promise","resolve","reader","FileReader","readAsText","onload","result","resultData","scenarioStats","name","match","score","date","push","all","then","className","Container","Header","Content","App","storedTheme","window","localStorage","getItem","matchMedia","matches","setItem","JSON","parse","setDarkTheme","useEffect","listenerFunction","e","addEventListener","removeEventListener","themeContext","Provider","value","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d20cdf14.chunk.js","sourcesContent":["import React from 'react'\n\nconst theme = {\n  light: {\n    background: '#f4eeff',\n    backgroundAccent: '#dcd6f7',\n    accent: '#a6b1e1',\n    text: '#424874',\n  },\n  dark: {\n    background: '#424874',\n    text: '#f4eeff',\n    backgroundAccent: '#a6b1e1',\n    accent: '#dcd6f7',\n  },\n}\n\nexport const colors = (isDarkTheme?: boolean) =>\n  isDarkTheme ? theme.dark : theme.light\n\nexport const ThemeContext = React.createContext({\n  isDarkTheme: false,\n  onThemeChange: (arg: any) => {},\n})\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Switch, MoonIcon } from 'evergreen-ui'\nimport { colors } from 'const/theme'\nimport { ComponentWithTheme } from 'const/types'\n\nconst ThemeSwitcherContainer = styled.div<ComponentWithTheme>`\n  color: white !important;\n  display: flex;\n  align-items: center;\n\n  & > svg {\n    fill: ${({ isDarkTheme }) => colors(isDarkTheme).text}!important;\n  }\n`\n\ninterface IThemeSwitcher {\n  isDarkTheme: boolean\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst ThemeSwitcher: React.FC<IThemeSwitcher> = ({ isDarkTheme, onChange }) => (\n  <ThemeSwitcherContainer isDarkTheme={isDarkTheme}>\n    <Switch checked={isDarkTheme} hasCheckIcon={false} onChange={onChange} />\n    <MoonIcon\n      color={!isDarkTheme ? undefined : 'selected'}\n      size={20}\n      marginLeft={6}\n    />\n  </ThemeSwitcherContainer>\n)\n\nexport default ThemeSwitcher\n","import { observable } from 'mobx'\n\nclass Stats {\n  @observable stats = []\n  @observable statsAmount = 0\n}\n\nconst StatsStore = new Stats()\nexport default StatsStore\n","import React, { useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport { FilePicker } from 'evergreen-ui'\nimport { observer } from 'mobx-react-lite'\n\nimport { colors, ThemeContext } from 'const/theme'\nimport { ComponentWithTheme } from 'const/types'\nimport StatsStore from 'Stores/StatsStore'\n\nconst MainPageContainer = styled.div<ComponentWithTheme>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  & > .customInput > button {\n    background-color: ${({ isDarkTheme }) => colors(isDarkTheme).backgroundAccent};\n    background-image: none;\n    color: ${({ isDarkTheme }) => colors(isDarkTheme).text}!important;\n  }\n`\nconst Greeting = styled.div`\n  font-size: 16px;\n  margin-bottom: 6px;\n`\nconst Tip = styled.div<ComponentWithTheme>`\n  font-size: 12px;\n  margin-top: 3px;\n  color: ${({ isDarkTheme }) => colors(isDarkTheme).accent};\n`\n\ninterface ScenarioStats {\n  name?: string\n  score?: string\n}\n\nconst hint =\n  '<Your steam folder>\\\\steamapps\\\\common\\\\FPSAimTrainer\\\\FPSAimTrainer\\\\stats'\n\nconst MainPage: React.FC = observer(() => {\n  const { isDarkTheme } = useContext(ThemeContext)\n  const [filesProcessed, setProcessedValue] = useState(0)\n\n  const readCsv = (files: FileList) => {\n    console.log(files)\n\n    const scenarioCount = files.length\n    StatsStore.statsAmount = scenarioCount\n    setProcessedValue(0)\n\n    const promises: Promise<ScenarioStats>[] = []\n\n    Array.from(files).forEach((file, index) => {\n      const filePromise = new Promise<ScenarioStats>((resolve) => {\n        const reader = new FileReader()\n        reader.readAsText((file as unknown) as Blob)\n        reader.onload = () => {\n          if (reader.result !== null) {\n            const resultData = reader.result as string\n            const scenarioStats = {\n              name: file.name.match(/(.*).-.Challenge/i)![1],\n              score: resultData.match(/Score:,(\\d*)/i)![1],\n              date: file.name.match(/Challenge.-.(.*).Stats/i)![1],\n            }\n            resolve(scenarioStats)\n            setProcessedValue(index + 1)\n          }\n          resolve({ name: 'null', score: 'null' })\n        }\n      })\n\n      promises.push(filePromise)\n    })\n\n    Promise.all(promises).then((scenarioStats) => {\n      console.log(scenarioStats)\n    })\n  }\n\n  const { statsAmount } = StatsStore\n\n  return (\n    <MainPageContainer isDarkTheme={isDarkTheme}>\n      <Greeting>Upload your statistics to begin</Greeting>\n      <FilePicker\n        multiple\n        width={250}\n        placeholder=\"0 files selected\"\n        onChange={readCsv}\n        className=\"customInput\"\n      />\n      <Tip isDarkTheme={isDarkTheme}>\n        {statsAmount === 0 ? hint : `${filesProcessed}/${statsAmount}`}\n      </Tip>\n    </MainPageContainer>\n  )\n})\n\nexport default MainPage\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport ThemeSwitcher from 'components/ThemeSwitcher'\nimport { colors, ThemeContext } from 'const/theme'\nimport { ComponentWithTheme } from 'const/types'\nimport MainPage from 'MainPage'\n\nconst Container = styled.div<ComponentWithTheme>`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${({ isDarkTheme }) => colors(isDarkTheme).background};\n  color: ${({ isDarkTheme }) => colors(isDarkTheme).text};\n  display: flex;\n  flex-direction: column;\n`\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  height: 44px;\n  padding: 12px;\n  box-sizing: border-box;\n`\nconst Content = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n`\n\nconst checkIfDeviceDarkTheme = () => {\n  if (\n    window.matchMedia &&\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n  ) {\n    window.localStorage.setItem('theme', 'true')\n    return 'true'\n  }\n  window.localStorage.setItem('theme', 'false')\n  return 'false'\n}\n\nconst App: React.FC = () => {\n  const storedTheme =\n    window.localStorage.getItem('theme') ?? checkIfDeviceDarkTheme()\n  const [isDarkTheme, setDarkTheme] = useState(JSON.parse(storedTheme))\n\n  const onThemeChange = (isDarkTheme: boolean) => {\n    setDarkTheme(isDarkTheme)\n    return window.localStorage.setItem('theme', isDarkTheme ? 'true' : 'false')\n  }\n\n  useEffect(() => {\n    const listenerFunction = (e: MediaQueryListEvent) => onThemeChange(e.matches)\n    window\n      .matchMedia('(prefers-color-scheme: dark)')\n      .addEventListener('change', listenerFunction)\n\n    return () =>\n      window\n        .matchMedia('(prefers-color-scheme: dark)')\n        .removeEventListener('change', listenerFunction)\n  }, [])\n\n  const themeContext = { isDarkTheme, onThemeChange }\n  return (\n    <ThemeContext.Provider value={themeContext}>\n      <Container isDarkTheme={isDarkTheme}>\n        <Header>\n          <ThemeSwitcher\n            isDarkTheme={isDarkTheme}\n            onChange={(e) => onThemeChange(e.target.checked)}\n          />\n        </Header>\n        <Content>\n          <MainPage />\n        </Content>\n      </Container>\n    </ThemeContext.Provider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n//reportWebVitals(console.log);\n"],"sourceRoot":""}